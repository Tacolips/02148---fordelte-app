package shooter;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

import org.jspace.ActualField;
import org.jspace.FormalField;
import org.jspace.RemoteSpace;
import org.jspace.Space;

public class GamePanel extends JPanel implements KeyListener {
private static final long serialVersionUID = 1L;
private static Space board;
private static String player, other;
private static Rectangle pos;
private static Rectangle pos2;
private int key;
private static JLabel playerSprite;
private static JLabel otherSprite;
private static ImageIcon otherImg, playerImg;
	public GamePanel() {
		setBounds(0, 0, 1280, 720);
		setLayout(null);
		System.out.println("GamePanel Created");
		
		pos = new Rectangle(20, 360, 50, 50); // bruges som din position
		pos2 = new Rectangle(1000, 360, 50, 50); // bruges til den anden players position
		key = 0; // bruges til keyListener
		
		playerSprite = new JLabel("player");
		playerSprite.setIcon(new ImageIcon(GamePanel.class.getResource("/shooter/playerOne/Slide__000.png")));
		playerSprite.setBounds(pos);
		add(playerSprite);
		
		otherSprite = new JLabel("other");
		otherSprite.setBounds(pos2);
		add(otherSprite);
	}
	
	
//	@Override 
//	public void paintComponent(Graphics g) {
//		super.paintComponent(g);
//		g.setColor(Color.black);
//		g.drawRect(pos.x, pos.y, pos.width, pos.height);
//		
//		g.setColor(Color.BLUE);
//		g.drawRect(pos2.x, pos2.y, pos2.width, pos2.width);
//	}
	
	
	public void setUpConnection(String Uri) {
		try {
			board = new RemoteSpace(Uri);
			Object[] in = board.get(new ActualField("started"), new FormalField(Object.class), new FormalField(Object.class), new FormalField(Object.class));
			player = (String) in[1];
			pos = (Rectangle) in[2];
			playerImg = (ImageIcon) in[3];
			System.out.println(playerImg);
//			playerSprite.setIcon(playerImg);
			if (player.equals("player 1")) {other = "player 2";}
			if (player.equals("player 2")) {other = "player 1";}
			System.out.println("created board for: "+ player+", waiting for "+other);
			board.put("ticket");			
			Thread t1 = new Thread(new Runnable() {
		         public void run() {
		        	 try {
						board.put(player,pos, playerImg);
						gamePanel(board);
					} catch (Exception e) {
						e.printStackTrace();
					}
		         }
		    });  
		    t1.start();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	public void gamePanel(Space b) {
		board = b;
		while (true) {
			try {
				board.get(new ActualField("ticket"));
//				Object[] playerOne = board.get(new ActualField(player), new FormalField(Object.class), new FormalField(Object.class));
				Object[] playerTwo = board.get(new ActualField(other), new FormalField(Object.class), new FormalField(Object.class));
//				pos = (Rectangle) playerOne[1];
				pos2 = (Rectangle) playerTwo[1];
				
				BufferedImage img = ImageIO.read(LoginPanel.class.getResource("/shooter/playerOne/Slide__000.png"));
				Image scaleImg = img.getScaledInstance(playerSprite.getWidth(), playerSprite.getHeight(), Image.SCALE_SMOOTH);
				playerImg = new ImageIcon(scaleImg);
//				playerSprite.setIcon(playerImg);
				
				otherImg = (ImageIcon) playerTwo[2];
				playerSprite.setIcon(playerImg);
				otherSprite.setIcon(otherImg);
				board.put(player,pos,playerImg);
				board.put(other,pos2,otherImg);
//				repaint();
				board.put("ticket");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	protected void animations() {
		int id = 1;
		while (true) {
			System.out.println("");
			if (true) {
				try {
					String imgUrl = "playerOne/Slide__00"+id+".png";
					BufferedImage img = ImageIO.read(this.getClass().getResource(imgUrl));
					
					Image scaleImg = img.getScaledInstance(playerSprite.getWidth(), playerSprite.getHeight(), Image.SCALE_SMOOTH);
					ImageIcon platIcon = new ImageIcon(scaleImg);
					playerSprite.setIcon(platIcon);
					if (id == 9) {id =0;}
					id++;
					
				} catch (Exception e2) {
					e2.printStackTrace();
				}
			}
		}
	}


	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyChar() == 'a') {
			System.out.println("hello");
		}
		key = e.getKeyCode();
		if (key == KeyEvent.VK_SPACE) {
			pos.x = pos.x+10;
			repaint();
			System.out.println("pressed space");
		}
		if (key == KeyEvent.VK_R) {
		}
	}
	@Override
	public void keyReleased(KeyEvent arg0) {
	}
	@Override
	public void keyTyped(KeyEvent arg0) {
	}
}

class fetcher {
	
}
