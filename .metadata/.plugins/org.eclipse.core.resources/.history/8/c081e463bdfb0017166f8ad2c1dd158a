package shooter;

import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.plaf.synth.SynthSpinnerUI;

import org.jspace.ActualField;
import org.jspace.FormalField;
import org.jspace.RemoteSpace;
import org.jspace.Space;

public class GamePanel extends JPanel implements KeyListener {
private static final long serialVersionUID = 1L;
private static Space board;
private static String player, other;
private static String playerPath, otherPath;
private static Rectangle pos, pos2;
private static JLabel playerSprite, otherSprite;
private static ImageIcon otherIcon, playerIcon;


	public GamePanel() {
		setBounds(0, 0, 1280, 720);
		setLayout(null);
		System.out.println("GamePanel Created");
		
		player = ""; // Bruges som tag, hvis du spiller som player 1 skal du hente updates fra player 2
		other = ""; // Bruges som field i get fra space
		
		// sæt start position for spiller (skal sættes til ny hvis det er player 2 der joiner)
		pos = new Rectangle(20, 360, 75, 75); // Start position
		pos2 = new Rectangle(1000, 360, 75, 75);
		playerSprite = new JLabel("player");
		playerSprite.setBounds(pos);
		playerIcon = new ImageIcon(LoginPanel.class.getResource("/shooter/playerOne/Idle__000.png"));
		playerSprite.setIcon(playerIcon);
		add(playerSprite);
		
		// Anden spillers position (kun til initialisering)
		otherSprite = new JLabel("other");
		otherSprite.setBounds(pos2);
		add(otherSprite);
	}
	
	
	// Sætter op en forbindelse mellem det oprettede space (se i LoginPanel)
	public void setUpConnection(String Uri) {
		try {
			board = new RemoteSpace(Uri);
			Object[] in = board.get(new ActualField("started"), new FormalField(Object.class));
			player = (String) in[1];
			setUpPlayer();
		} catch(Exception ex) {}
	}
	
	// Vælger den mappe som spilleren skal hente sprites fra
	public void setUpPlayer() {
		if (player.equals("player 1")) {
			other = "player 2";
			playerPath = "/shooter/playerOne/Idle__000.png";
			otherPath = "/shooter/playerTwo/Idle (1).png";
		}
		else if (player.equals("player 2")) {
			other = "player 1";
			playerPath =  "/shooter/playerTwo/Idle (1).png";
			otherPath = "/shooter/playerOne/Idle__000.png";
		}
		playerSprite.setIcon(new ImageIcon(LoginPanel.class.getResource(playerPath)));
		otherSprite.setIcon(new ImageIcon(LoginPanel.class.getResource(otherPath)));
		try {
			board.put(player, playerPath);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		ListenForUpdate();
	}
	
	// opretter en ny thread til at hente updates fra den anden spiller
	public void ListenForUpdate() {
		Thread updates = new Thread(new Runnable() {
			@Override
			public void run() {
				while (true) {
					try {
						Object[] update = board.get(new ActualField(other), new FormalField(Object.class));
						otherSprite = (JLabel) update[1];
					} catch (Exception e) {
						e.printStackTrace();
					}				
				}
			}
		});
		updates.start();
	}
	

	@Override
	public void keyPressed(KeyEvent e) {
		System.out.println("a key was pressed");
	}
	@Override
	public void keyReleased(KeyEvent arg0) {
	}
	@Override
	public void keyTyped(KeyEvent arg0) {
	}
}

class fetcher {
	
}
